Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Nodesize  = "w",
zoom = TRUE)
aristas
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos)
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'tipo', Nodesize  = "w",
zoom = TRUE)
source('~/Desktop/Online/RCoursera/R-Coursera/DevDataProducts/ShinyGraph/grafo.R')
setwd("/home/fou/Desktop/Online/RCoursera/R-Coursera/DevDataProducts/ShinyGraph")
oct <- read.csv('2016-10.csv', sep = ',')
setwd("/home/fou/Desktop/Online/RCoursera/R-Coursera/DevDataProducts/ShinyGraph")
oct <- read.csv('2016-10.csv', sep = ',')
library(dplyr)
flujo_neg <- oct %>% select(Ciclo_Estacion_Retiro, Ciclo_Estacion_Arribo) %>%
arrange(Ciclo_Estacion_Retiro, Ciclo_Estacion_Arribo) %>%
group_by(Ciclo_Estacion_Retiro) %>% summarise(w = n()) #viajes que salen de estacion
flujo_neg$tipo <- "Salida"
names(flujo_neg) <- c('Estacion',"wins", "tipo")
flujo_pos <- oct %>% select(Ciclo_Estacion_Retiro, Ciclo_Estacion_Arribo) %>%
arrange( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>%
group_by(Ciclo_Estacion_Arribo) %>% summarise(dentro = n()) %>% arrange(desc(dentro))
flujo_pos$tipo <- "Entrada"
names(flujo_pos) <- c('Estacion',"w","tipo")
edges_in <- oct %>% select(Ciclo_Estacion_Retiro, Ciclo_Estacion_Arribo) %>%
group_by(Ciclo_Estacion_Retiro, Ciclo_Estacion_Arribo) %>% summarise(w = n()) %>%
arrange(desc(w))
tail(edges_in)
ins <- head(edges_in, 30)
edges_out <- oct %>% select( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>%
group_by( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>% summarise(w = n()) %>%
arrange(desc(w))
outs <- head(edges_out, 30)
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
aristas <- unique(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
nodos
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'tipo', Nodesize  = "w",
zoom = TRUE)
aristas
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'tipo',# Nodesize  = "w",
zoom = TRUE)
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'tipo',# Nodesize  = "w",
zoom = TRUE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'tipo',
radiusCalculation = "Math.sqrt(d.nodesize)",
Nodesize  = "w",
zoom = TRUE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'tipo',
radiusCalculation = "Math.sqrt(d.w)",
Nodesize  = "w",
zoom = TRUE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'tipo',
radiusCalculation = "Math.sqrt(d.nodesize)",
Nodesize  = "w",
zoom = TRUE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'tipo',
radiusCalculation = "Math.sqrt(Math.sqrt(d.nodesize))",
Nodesize  = "w",
zoom = TRUE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'tipo',
radiusCalculation = "Math.sqrt(Math.sqrt(d.nodesize))",
Nodesize  = "w",
zoom = TRUE, legend = TRUE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'tipo',
radiusCalculation = "Math.log(d.nodesize)",
Nodesize  = "w",
zoom = TRUE, legend = TRUE)
aristas$value
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.log(d.nodesize)",
Nodesize  = "w",
zoom = TRUE, legend = TRUE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.log(d.nodesize)",
Nodesize  = "w",
zoom = TRUE,
#legend = TRUE
)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.sqrt(d.nodesize)",
Nodesize  = "w",
zoom = TRUE,
#legend = TRUE
)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pot(Math.log(d.nodesize),2)",
Nodesize  = "w",
zoom = TRUE,
#legend = TRUE
)
aristas$value
log(aristas$value)
log(aristas$value)**2
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pot(Math.log(d.nodesize),3)",
Nodesize  = "w",
zoom = TRUE,
#legend = TRUE
)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pot(d.nodesize, .5)",
Nodesize  = "w",
zoom = TRUE,
#legend = TRUE
)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pot(d.nodesize)",
Nodesize  = "w",
zoom = TRUE,
#legend = TRUE
)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pot(d.nodesize)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.log(d.nodesize)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize),2)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
N
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "Math.pow(value,2)", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "Math.pow(d.value,2)", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
aristas$value
aristas$value <- aristas$value^2
aristas$value
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "Math.pow(d.value,2)", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
aristas$value <- aristas$value*3
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
library(dplyr)
flujo_neg <- oct %>% select(Ciclo_Estacion_Retiro, Ciclo_Estacion_Arribo) %>%
arrange(Ciclo_Estacion_Retiro, Ciclo_Estacion_Arribo) %>%
group_by(Ciclo_Estacion_Retiro) %>% summarise(w = n()) #viajes que salen de estacion
flujo_neg$tipo <- "Salida"
names(flujo_neg) <- c('Estacion',"wins", "tipo")
flujo_pos <- oct %>% select(Ciclo_Estacion_Retiro, Ciclo_Estacion_Arribo) %>%
arrange( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>%
group_by(Ciclo_Estacion_Arribo) %>% summarise(dentro = n()) %>% arrange(desc(dentro))
flujo_pos$tipo <- "Entrada"
names(flujo_pos) <- c('Estacion',"w","tipo")
edges_in <- oct %>% select(Ciclo_Estacion_Retiro, Ciclo_Estacion_Arribo) %>%
group_by(Ciclo_Estacion_Retiro, Ciclo_Estacion_Arribo) %>% summarise(w = n()) %>%
arrange(desc(w))
tail(edges_in)
ins <- head(edges_in, 30)
edges_out <- oct %>% select( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>%
group_by( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>% summarise(w = n()) %>%
arrange(desc(w))
outs <- head(edges_out, 30)
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
aristas$value <- aristas$value*3
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
?scale
aristas$value <- scale(aristas$value)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
aristas$value
center
?scale
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
aristas$value <- center(aristas$value, scale = FALSE)
aristas$value <- scale(aristas$value, scale = FALSE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
ins <- head(edges_in, 60)
outs <- head(edges_out, 60)
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
aristas$value <- scale(aristas$value, scale = FALSE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
ins <- head(edges_in, 100)
edges_out <- oct %>% select( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>%
group_by( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>% summarise(w = n()) %>%
arrange(desc(w))
outs <- head(edges_out, 100)
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
aristas$value <- scale(aristas$value, scale = FALSE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
ins <- head(edges_in, 500)
edges_out <- oct %>% select( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>%
group_by( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>% summarise(w = n()) %>%
arrange(desc(w))
outs <- head(edges_out, 500)
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
aristas$value <- scale(aristas$value, scale = FALSE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
head(edges_i})
head(edges_in)
names(edges_in)
names(edges_in)
head(edges_in)
ins <- subset(edges_in, w > 500)
mean(edges_in$w)
hist(edges_in$w)
summary(edges_in$w)
outs <- head(edges_out, 300)
ins <- subset(edges_in, w > 300)
summary(edges_out)
outs <- subset(edges_out, w> 300)
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
aristas$value <- scale(aristas$value, scale = FALSE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
outs <- subset(edges_out, w >100)
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
aristas$value <- scale(aristas$value, scale = FALSE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
source('~/Desktop/Online/RCoursera/R-Coursera/DevDataProducts/ShinyGraph/grafo.R')
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
ins <- subset(edges_in, w > 50)
edges_out <- oct %>% select( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>%
group_by( Ciclo_Estacion_Arribo, Ciclo_Estacion_Retiro) %>% summarise(w = n()) %>%
arrange(desc(w))
summary(edges_out)
outs <- subset(edges_out, w >50)
aristas <- rbind(ins, outs)
aristas <- as.data.frame(aristas)
nodos <- as.data.frame(flujo_pos)
names(aristas) <- c("source", "target", "value" )
names(nodos) <- c("id", "w", "tipo")
aristas$source <- aristas$source - 1
aristas$target <- aristas$target - 1
nodos$id <- nodos$id -1
aristas$value <- scale(aristas$value, scale = FALSE)
forceNetwork(Links = aristas, Nodes = nodos,
Source = 'source', Target = 'target',
Value = "value", opacity = 0.8,
NodeID = 'id', Group = 'w',
radiusCalculation = "Math.pow(Math.log(d.nodesize), 1.5)",
Nodesize  = "w",
zoom = TRUE
#legend = TRUE
)
library(shiny)
source('~/Desktop/Online/RCoursera/R-Coursera/DevDataProducts/ShinyGraph/grafo.R')
